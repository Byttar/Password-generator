{"version":3,"sources":["components/progress-bar/bar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["bar","completed","color","className","style","width","background","App","inputText","useState","text","setText","range","setRange","points","setPoints","options","setOptions","addOption","e","Object","assign","target","name","checked","useEffect","slice","pass","score","ref","input","onChange","value","placeholder","type","maxLength","onClick","select","document","execCommand","parseInt","min","max","length","result","characters","numbers","uppercase","special_c","charactersLength","i","charAt","Math","floor","random","generatePassword","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAgBeA,G,YARc,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,MACtC,OACI,yBAAKC,UAAU,UACX,yBAAKC,MAAO,CAACC,MAAM,GAAD,OAAKJ,EAAL,KAAmBK,WAAYJ,GAAQC,UAAU,gB,gBC0FhEI,EAvEW,WAAO,IA0B3BC,EA1B0B,EAENC,mBAAiB,IAFX,mBAEvBC,EAFuB,KAEjBC,EAFiB,OAGJF,mBAAiB,GAHb,mBAGvBG,EAHuB,KAGhBC,EAHgB,OAIFJ,mBAAiB,GAJf,mBAIvBK,EAJuB,KAIfC,EAJe,OAKAN,mBAAmB,IALnB,mBAKvBO,EALuB,KAKdC,EALc,KAsBxBC,EAAY,SAACC,GACjBF,EAAWG,OAAOC,OAAOL,EAAdI,OAAA,IAAAA,CAAA,GAAyBD,EAAEG,OAAOC,KAAQJ,EAAEG,OAAOE,YAgBhE,OALAC,qBAAU,WACRd,EAAQD,EAAKgB,MAAM,EAAGd,IACtBG,EAAUY,IAAKjB,GAAMkB,UAIrB,yBAAKzB,UAAU,OACX,kDACA,yBAAKA,UAAU,eACf,2BAAO0B,IAAK,SAACC,GAAD,OAAWtB,EAAYsB,GAAOC,SAjC3B,SAACZ,GACpBR,EAAQQ,EAAEG,OAAOU,QAgCqDC,YAAY,0BAA0BC,KAAK,OAAOF,MAAOtB,EAAMyB,UAAWvB,IAC5I,uBAAGT,UAAU,OAAOiC,QAhBF,WACX5B,KACF6B,SACTC,SAASC,YAAY,UAajB,sBAEA,yBAAKpC,UAAU,kBACb,uDAA6BS,GAC7B,2BAAOmB,SAlCW,SAACZ,GACzBN,EAAS2B,SAASrB,EAAEG,OAAOU,SAiCeA,MAAOpB,EAAOsB,KAAK,QAAQO,IAAI,IAAIC,IAAI,QAE7E,yBAAKvC,UAAU,WACb,+BACA,2BAAO+B,KAAK,WAAWH,SAAUb,EAAWK,KAAK,cADjD,gCAIA,+BACA,2BAAOW,KAAK,WAAWH,SAAUb,EAAWK,KAAK,cADjD,+BAIA,+BACA,2BAAOW,KAAK,WAAWH,SAAUb,EAAWK,KAAK,YADjD,oBAKF,4BAAQa,QA9CM,WAClBzB,EAtCqB,SAACgC,EAAgB3B,GAEvC,IAAI4B,EAAS,GACTC,EAAmB,6BACpB7B,IACFA,EAAQ8B,UAAYD,GAAc,cAClC7B,EAAQ+B,YAAcF,GAAc,8BACpC7B,EAAQgC,YAAcH,GAAc,cAIrC,IAFA,IAAII,EAAmBJ,EAAWF,OAExBO,EAAI,EAAGA,EAAIP,EAAQO,IAC1BN,GAAUC,EAAWM,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAG1D,OAAOL,EAuBEW,CAAiB3C,EAAOI,KA6CEb,UAAU,mBAAxC,YACA,kBAAC,EAAD,CAAKD,MAzDiB,CAAC,MAAO,SAAW,SAAW,QAAS,WAyD3CY,GAASb,UAAoB,GAATa,IACtC,+BA3DqB,CAAC,YAAa,OAAQ,SAAU,SAAU,iBA2DlDA,MCpFD0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1e54864b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './bar.css'\r\n\r\ninterface IProps{\r\n    completed: number,\r\n    color?: string\r\n}\r\n\r\nconst bar:React.FC<IProps> = ({completed, color}) => {\r\n    return (\r\n        <div className=\"border\">\r\n            <div style={{width: `${completed}%`, background: color}} className=\"Progress\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default bar;\r\n","import React, { useState, ChangeEvent, useEffect } from 'react';\nimport './App.css';\nimport Bar from './components/progress-bar/bar'\nimport pass from 'zxcvbn';\n\ninterface IOptions{\n  uppercase?: boolean,\n  special_c?: boolean,\n  numbers?: boolean\n}\n\nconst generatePassword = (length: number, options?: IOptions) =>  { \n\n   let result = '';\n   var characters       = 'abcdefghijklmnopqrstuvwxyz';\n   if(options){\n    options.numbers && (characters += '0123456789');\n    options.uppercase && (characters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n    options.special_c && (characters += '!@#$~{}[]');\n   }\n   var charactersLength = characters.length;\n\n   for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n\n   return result;\n  \n}\n\nconst App: React.FC<{}> = () => {\n\n  const [text, setText] = useState<string>('');\n  const [range, setRange] = useState<number>(5);\n  const [points, setPoints] = useState<number>(0);\n  const [options, setOptions] = useState<IOptions>({});\n\n  const info:Array<string> = ['Very Weak', 'Weak', 'Medium', 'Strong', 'Really Strong' ]\n  const color:Array<string> = ['red', 'orange',  'yellow',  'green', '#15ff15']\n\n  const handleChange = (e:ChangeEvent<HTMLInputElement>) => {\n    setText(e.target.value);\n  }\n\n  const handleRangeChange = (e:ChangeEvent<HTMLInputElement>) => {\n    setRange(parseInt(e.target.value));\n  }\n\n  const buttonClick = () => {\n    setText(generatePassword(range, options))\n  }\n\n  const addOption = (e:ChangeEvent<HTMLInputElement>) => {\n    setOptions(Object.assign(options, {[e.target.name] : e.target.checked}));\n  }\n\n  let inputText:HTMLInputElement | null;\n\n  const copyToClipboard = () => {\n    const el = inputText;\n    el && el.select()\n    document.execCommand(\"copy\")\n  }\n\n  useEffect(() => {\n    setText(text.slice(0, range));\n    setPoints(pass(text).score);\n  });\n\n  return (\n    <div className=\"App\">\n        <h1>PASSWORD GENERATOR</h1>\n        <div className=\"input-group\">\n        <input ref={(input) => inputText = input} onChange={handleChange} placeholder=\"Type your password here\" type=\"text\" value={text} maxLength={range}/>\n        <a className=\"copy\" onClick={copyToClipboard}>copy to clipboard</a>\n        </div>\n        <div className=\"flex spb range\">\n          <label>Max password length: {range}</label>\n          <input onChange={handleRangeChange} value={range} type=\"range\" min=\"5\" max=\"20\"/>\n        </div>\n        <div className=\"options\">\n          <label>\n          <input type=\"checkbox\" onChange={addOption} name=\"uppercase\"/>\n            Include Uppercase Characters\n          </label>\n          <label>\n          <input type=\"checkbox\" onChange={addOption} name=\"special_c\"/>\n            Include Especial Characters\n          </label>\n          <label>\n          <input type=\"checkbox\" onChange={addOption} name=\"numbers\"/>\n            Include Numbers\n          </label>\n        </div>\n        <button onClick={buttonClick} className=\"generate-button\">Generate</button>\n        <Bar color={color[points]} completed={points * 25}/>\n        <label>{info[points]}</label>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}